{
  "_args": [
    [
      "req-timeout",
      "/Users/davidLiang/projects/Mongo_Express"
    ]
  ],
  "_from": "req-timeout@latest",
  "_id": "req-timeout@1.0.2",
  "_inCache": true,
  "_installable": true,
  "_location": "/req-timeout",
  "_npmUser": {
    "email": "rian@advanced.net.tw",
    "name": "hikari"
  },
  "_npmVersion": "1.1.49",
  "_phantomChildren": {},
  "_requested": {
    "name": "req-timeout",
    "raw": "req-timeout",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/req-timeout/-/req-timeout-1.0.2.tgz",
  "_shasum": "abfba82f896a565de6ec7a1feeed2197fea8b108",
  "_shrinkwrap": null,
  "_spec": "req-timeout",
  "_where": "/Users/davidLiang/projects/Mongo_Express",
  "author": {
    "name": "Halid Rian"
  },
  "bugs": {
    "url": "https://github.com/advanced/req-timeout/issues"
  },
  "dependencies": {},
  "description": "set , reset and clear request timeout for connect and express",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "abfba82f896a565de6ec7a1feeed2197fea8b108",
    "tarball": "https://registry.npmjs.org/req-timeout/-/req-timeout-1.0.2.tgz"
  },
  "homepage": "https://github.com/advanced/req-timeout#readme",
  "keywords": [
    "middleware",
    "express",
    "connect",
    "timeout",
    "request"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "email": "rian@advanced.net.tw",
      "name": "hikari"
    }
  ],
  "name": "req-timeout",
  "optionalDependencies": {},
  "readme": "req-timeout\n===========\nset , reset and clear request timeout for connect and express\n\ninstallation\n-----\n```bash\nnpm install req-timeout\n```\n\nUsage\n-----\nreq-timeout is a middleware so you need to add it in your chain.\n\n```javascript\nvar express = require('express'),\n\ttimeout = require('req-timeout'),\n\tapp = express();\n\n// timeout the request at 1 seconds\napp.configure('development', function() {\n\tapp.use(timeout(1000));\n});\n\n// timeout the request at 3 seconds\napp.configure('production', function() {\n\tapp.use(timeout(3000));\n});\n\napp.use(app.router);\n\napp.use(function(err, req, res, next) {\n\tif (err.timeout){\n\t\tres.send({\n\t\t\t'err': 'internal server error',\n\t\t\t'code': 500\n\t\t});\n\t}\n\n});\n\napp.get('/slow', function(req, res) {\n\tsetTimeout(function() {\n\t\tres.send('too slow to actually matter, should timeout');\n\t}, 3500);\n});\n\napp.get('/fast', function(req, res) {\n\tres.send('should be AOK');\n});\n\napp.get('/reset', function(req, res) {\n\treq.resetTimeout(4000)\n\tsetTimeout(function() {\n\t\tres.send('should be OK, time has been extended');\n\t}, 3500);\n});\n\napp.get('/clear', function(req, res) {\n\treq.clearTimeout()\n\tsetTimeout(function() {\n\t\tres.send('should be OK, timeout has been cleared');\n\t}, 3500);\n});\n\napp.listen(3000);\n```\n\noverwrite express/connect timeout middleware\n-------\nsame api, req-timeout only augment the middleware with a resetTimeout function.\n\n```javascript\nvar express = require('express'),\n    timeout = require('req-timeout'), \n    express.timeout = timeout,\n    app = express();\n    \n    app.use(express.timeout(3000));\n    \n    ....\n````\n\n",
  "repository": {
    "type": "git",
    "url": "git://github.com/advanced/req-timeout.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.2"
}
